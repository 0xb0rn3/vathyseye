#!/usr/bin/env bash

# VathysEye - Advanced File Search and Indexing System
# Author: 0xb0rn3
# Version: 2.5

# Strict mode for robust script execution
set -euo pipefail

# Global configuration
VERSION="2.5"
AUTHOR="0xb0rn3"

# Color and formatting constants
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
MAGENTA='\033[0;35m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Banner (ASCII art as specified)
BANNER="⠀⠀⠀⠀⠀⠀⢀⠀⠀⠀⠀⠀⠀⢠⡆⠀⠀⠀⠀⠀⠀⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠈⣷⣄⠀⠀⠀⠀⣾⣷⠀⠀⠀⠀⣠⣾⠃⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⢿⠿⠃⠀⠀⠀⠉⠉⠁⠀⠀⠐⠿⡿⠀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⠀⠀⠀⠀⣀⣠⣤⣤⣤⣶⣶⣶⣤⣤⣄⣀⡀⠀⠀⠀⠀⠀⠀⠀⠀
⠀⠀⠀⠀⠀⢀⣤⣶⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣿⣷⣦⣄⠀⠀⠀⠀⠀⠀
⠀⠀⠀⣠⣶⣿⣿⡿⣿⣿⣿⡿⠋⠉⠀⠀⠉⠙⢿⣿⣿⡿⣿⣿⣷⣦⡀⠀⠀⠀
⠀⢀⣼⣿⣿⠟⠁⢠⣿⣿⠏⠀⠀⢠⣤⣤⡀⠀⠀⢻⣿⣿⡀⠙⢿⣿⣿⣦⠀⠀
⣰⣿⣿⡟⠁⠀⠀⢸⣿⣿⠀⠀⠀⢿⣿⣿⡟⠀⠀⠈⣿⣿⡇⠀⠀⠙⣿⣿⣷⡄
⠈⠻⣿⣿⣦⣄⠀⠸⣿⣿⣆⠀⠀⠀⠉⠉⠀⠀⠀⣸⣿⣿⠃⢀⣤⣾⣿⣿⠟⠁
                  VathysEye
        IF IT EXISTS I'LL FIND IT"

# Configuration and path setup
CONFIG_DIR="${HOME}/.config/vathyseye"
CACHE_DIR="${HOME}/.cache/vathyseye"
DATABASE_PATH="${CACHE_DIR}/vathyseye.db"
LOG_FILE="${CACHE_DIR}/vathyseye.log"

# Dependency requirements
REQUIRED_DEPS=("sqlite3" "file" "find" "grep" "curl")

# Logging function with enhanced output
log() {
    local level="$1"
    local message="$2"
    local timestamp=$(date "+%Y-%m-%d %H:%M:%S")
    local log_prefix=""

    case "${level}" in
        ERROR) log_prefix="${RED}[ERROR]${NC}" ;;
        WARN)  log_prefix="${YELLOW}[WARN]${NC}" ;;
        INFO)  log_prefix="${GREEN}[INFO]${NC}" ;;
        DEBUG) log_prefix="${BLUE}[DEBUG]${NC}" ;;
        *)     log_prefix="[${level}]" ;;
    esac

    # Log to file and console
    echo "[${timestamp}] ${log_prefix} ${message}" | tee -a "${LOG_FILE}" >&2
}

# Dependency checker and installer
check_and_install_deps() {
    local missing_deps=()

    # Check for missing dependencies
    for dep in "${REQUIRED_DEPS[@]}"; do
        if ! command -v "${dep}" &> /dev/null; then
            missing_deps+=("${dep}")
        fi
    done

    # Install missing dependencies based on package manager
    if [[ ${#missing_deps[@]} -gt 0 ]]; then
        log "WARN" "Missing dependencies: ${missing_deps[*]}"
        
        # Detect package manager
        if command -v apt-get &> /dev/null; then
            log "INFO" "Using apt-get to install dependencies"
            sudo apt-get update
            sudo apt-get install -y "${missing_deps[@]}"
        elif command -v dnf &> /dev/null; then
            log "INFO" "Using dnf to install dependencies"
            sudo dnf install -y "${missing_deps[@]}"
        elif command -v yum &> /dev/null; then
            log "INFO" "Using yum to install dependencies"
            sudo yum install -y "${missing_deps[@]}"
        elif command -v pacman &> /dev/null; then
            log "INFO" "Using pacman to install dependencies"
            sudo pacman -S --noconfirm "${missing_deps[@]}"
        else
            log "ERROR" "No supported package manager found. Please install: ${missing_deps[*]}"
            return 1
        fi
    fi
}

# Initialize configuration and cache directories
initialize_environment() {
    mkdir -p "${CONFIG_DIR}" "${CACHE_DIR}"
}

# Database initialization with advanced indexing
initialize_database() {
    sqlite3 "${DATABASE_PATH}" << EOF
PRAGMA journal_mode=WAL;
PRAGMA synchronous=NORMAL;
PRAGMA encoding='UTF-8';
PRAGMA foreign_keys=ON;

CREATE TABLE IF NOT EXISTS files (
    path TEXT PRIMARY KEY,
    name TEXT NOT NULL,
    size INTEGER NOT NULL,
    category TEXT NOT NULL,
    modified_time INTEGER NOT NULL,
    indexed_at INTEGER NOT NULL,
    mime_type TEXT,
    permissions TEXT
);

CREATE INDEX IF NOT EXISTS idx_name ON files(name);
CREATE INDEX IF NOT EXISTS idx_category ON files(category);
CREATE INDEX IF NOT EXISTS idx_size ON files(size);
EOF
}

# Advanced file categorization
categorize_file() {
    local filepath="$1"
    local mime=$(file -b --mime-type "${filepath}" 2>/dev/null)
    
    case "${mime}" in
        video/*) echo "video" ;;
        image/*) echo "image" ;;
        audio/*) echo "audio" ;;
        text/*|application/pdf|application/msword) echo "document" ;;
        application/zip|application/x-rar|application/x-7z-compressed) echo "archive" ;;
        *) echo "other" ;;
    esac
}

# File indexing function
index_file() {
    local filepath="$1"
    
    [[ ! -f "${filepath}" ]] && return 1
    
    local filename=$(basename "${filepath}")
    local filesize=$(stat -c %s "${filepath}")
    local modified_time=$(stat -c %Y "${filepath}")
    local category=$(categorize_file "${filepath}")
    local mime_type=$(file -b --mime-type "${filepath}")
    local permissions=$(stat -c "%A" "${filepath}")
    local indexed_time=$(date +%s)

    sqlite3 "${DATABASE_PATH}" << EOF
INSERT OR REPLACE INTO files 
(path, name, size, category, modified_time, indexed_at, mime_type, permissions)
VALUES 
('${filepath}', '${filename}', ${filesize}, '${category}', ${modified_time}, ${indexed_time}, '${mime_type}', '${permissions}');
EOF
}

# Advanced file search with multiple strategies
search_files() {
    local search_path="${1:-.}"
    local pattern="${2:-*}"
    local max_depth="${3:-10}"
    local category="${4:-}"
    
    # Search strategy with multiple filters
    find "${search_path}" \
        -maxdepth "${max_depth}" \
        -type f \
        -regextype posix-extended \
        -regex ".*${pattern}.*" \
        | while read -r file; do
            # Optional category filtering
            if [[ -z "${category}" ]] || [[ "$(categorize_file "${file}")" == "${category}" ]]; then
                echo "${file}"
                # Index file during search
                index_file "${file}"
            fi
        done
}

# Interactive search mode with advanced features
interactive_search() {
    clear
    echo -e "${BLUE}${BANNER}${NC}"
    echo -e "${MAGENTA}Interactive Search Mode${NC}"
    
    while true; do
        read -p "Search pattern (or 'quit' to exit): " pattern
        
        if [[ "${pattern}" == "quit" ]]; then
            break
        fi
        
        # Enhanced search with category and detailed output
        search_files "." "${pattern}" | while read -r file; do
            category=$(categorize_file "${file}")
            size=$(du -h "${file}" | cut -f1)
            echo -e "${GREEN}${file}${NC} [${YELLOW}${category}${NC}] [${CYAN}${size}${NC}]"
        done
    done
}

# Update mechanism from GitHub repository
update_vathyseye() {
    log "INFO" "Checking for updates..."
    
    # Fetch latest version from GitHub
    latest_version=$(curl -s "https://raw.githubusercontent.com/0xb0rn3/vathyseye/main/version.txt")
    
    if [[ "${latest_version}" != "${VERSION}" ]]; then
        log "INFO" "New version available: ${latest_version}"
        
        # Download and replace current script
        curl -L "https://raw.githubusercontent.com/0xb0rn3/vathyseye/main/run" -o "$0"
        chmod +x "$0"
        
        log "SUCCESS" "Updated to version ${latest_version}"
        exit 0
    else
        log "INFO" "Already on latest version"
    fi
}

# Full system indexing
full_system_index() {
    log "INFO" "Starting full system indexing..."
    
    find / -type f 2>/dev/null | while read -r file; do
        index_file "${file}"
    done
    
    log "INFO" "System indexing complete"
}

# Main execution function
main() {
    # Display banner
    echo -e "${BLUE}${BANNER}${NC}"
    
    # Initialize environment
    initialize_environment
    
    # Check and install dependencies
    check_and_install_deps
    
    # Initialize database
    initialize_database
    
    # Parse arguments
    case "${1:-}" in
        update|--update|-u)
            update_vathyseye
            ;;
        index|--index|-i)
            full_system_index
            ;;
        search|--search|-s)
            shift
            search_files "${@}"
            ;;
        interactive|--interactive)
            interactive_search
            ;;
        *)
            echo "Usage: $0 [update|index|search|interactive]"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"
